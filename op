#!/bin/sh

#doc#1 op - *The* operations tool
#
# This program, aims to ease systems definition and maintenance.
#
# For more information, see: https://github.com/1n1/op
#
#doc#2 Initialization
#
# When you call ```op``` without arguments, it sources all operations stored
# in a relative subdirectory from the invocation dir, under ```./play/*```.
#
# Those sourced operations, can reuse this program variables and functions.
#
# There are switches to call specific ```./play/``` files (```-p```) and
# specific requests under ```./requests/``` with (```-r```). We will reference
# those custom files as "recipes" from now on.
#
# By default we're quiet, with the program output. Use ```-v``` to see verbose
# messages.
#
# Use ```--trial``` on the command line, for test without applying commands.
#
# The modes ```-e``` and ```-u```, are set at initialization, recipes will be
# affected by such behavior.
#
#cut#
set -eu

#doc#2 Program variables
#
# The program initializes the following variables, that you can latter
# reuse in your recipes.
#
# * ```version```: The program version.
# * ```op```: contains the executable name, used on messages, etc.
# * ```work_dir```: The directory where the program was invocated.
# * ```files```: The main directory for files used in recipes.
# * ```rollback_dir```: The rollback files main directory.
# * ```lock```: The file used to block against parallel sessions.
# * ```verbose```: The verbosity switch (bool, default disabled, 0).
# * ```trial```: The trial switch (bool, default disabled, 0).
# * ```nocolor```: The colors switch (boold, default disabled, 0).
# * ```hostname```: It contains the hostname at our launch time.
#
#cut#
version=0.3
op=${0##*/}
work_dir="$( pwd )"
files="$work_dir/files"
rollback_dir="$work_dir/rollback"
lock="$work_dir/.lock"
verbose=0
trial=0
nocolor=0
hostname="$( uname -n )"

#doc#2 Color variables
#
# The following foreground color variables, are initialized for reusing:
#
#     normal, red, green, yellow, blue, magenta, cyan, white
#cut#
normal="$(  tput setaf 9; tput sgr0 )"
red="$(     tput setaf 1; tput bold )"
green="$(   tput setaf 2; tput bold )"
yellow="$(  tput setaf 3; tput bold )"
blue="$(    tput setaf 4; tput bold )"
magenta="$( tput setaf 5; tput bold )"
cyan="$(    tput setaf 6; tput bold )"
white="$(   tput setaf 7; )"


#doc#3 Logging variables
#
# Each run, gets a uniq identifier, stored in the variable: ```run_id```
#
# This is used to manage the symlinks, to the latest log and the latest
# rollback directories.
#
# The variables ```logs``` and ```logfile``` will point to our current
# log during execution. For internal use.
#
#cut#
run_id="$hostname.$( date +'%Y%m%d%H%M%S%N' ).$$"

# Directory to hold the log files.
logs="$work_dir/logs/$(date +'%Y/%m/%d')"

# Log file. We use a new one on each run.
log_file="$logs/$(date +%H-%M-%S.%N).log"

#doc#3 Notifications variables
#
#
# Notifications are controlled by the boolean: ```notify_enabled```
#
# Set to 1 to notify run results, set to 0 to disable notifications.
#
# We start counting, like if there were no changes or errors...
# HTTP notifications are configured using:
#
# ```http_url```: URL to use for the request
# ```http_headers```: Extra headers in curl format
# ```http_options```: All of the previous together
#
# Use ```http_options``` to tune any extra curl option you may need.
#
#cut#
notify_enabled=0
notify=0
http_url="https://127.0.0.1/report"
http_headers="-H 'OP: $version' -H 'RunId: $run_id' -H 'Client: $hostname'"
http_options="-s $http_headers $http_url"

#doc#2 General purpose functions
#
# Functions for Output, messages and general purpose
#
#doc#3 function now
#
# Prints a timestamp intended for messages. Precision is nanoseconds,
# this may change for portability in a future.
#
# No arguments.
#
#     USAGE
#       now
#
#cut#
now () { date +'%Y-%m-%d %H:%M:%S.%N'; }

#doc#3 function log
#
# Dispatchs a message to the log.
#
# In the process, colors are remved from the message.
#
#     USAGE
#       log MSG
#
#cut#
log () {
  local normal=""
  local red=""
  local green=""
  local yellow=""
  local blue=""
  local magenta=""
  local msg="$(echo "$*" | sed -r 's/\x1b\[[0-9;]*m?//g')"

  printf -- '[%s] [%s] %s\n' \
    "$(now)" "${USER:+$USER}${SUDO_USER:+"/$SUDO_USER"}" "$msg" >> "$log_file";
}

#doc#3 function assert
#
# Finishes a step as [DONE].
#
#     USAGE
#       assert MSG
#
#cut#
assert () {
  if [ "$verbose" = 1 ]; then
    printf "$normal[${green}DONE${normal}] %s\n" "$*"
  fi
  log "DONE $*"
}

#doc#3 function error
#
# Triggers an ERROR with the given message..
#
# Errors trigger notifications if they are enabled. Do not stop execution.
#
#     USAGE
#       error MSG
#
#cut#
error () {
  notify
  printf "$normal[${red}ERROR${normal}] %s\n" "$*" 2>&1
  log "ERROR $*"
}

#doc#3 function die
#
# Triggers a fatal ERROR, finishing the execution.
#
#     USAGE
#       die MSG
#
#cut#
die () {
  error "$*"
  exit 1
}

#doc#3 function info
#
# Dispatch a INFO message.
#
#     USAGE
#       info MSG
#
#cut#
info () {
  if [ "$verbose" = 1 ]; then
    printf "$normal[${blue}INFO${normal}] ${blue}%s${normal}\n" "$*"
  fi
  log "INFO $*"
}

#doc#3 FUNTION report
#
# Reports a CHANGE.
#
# Runs with changes are notified (if enabled).
#
#     USAGE
#       report MSG
#
#cut#
report () {
  notify
  printf "$normal[${yellow}CHANGE${normal}] %s\n" "$*" || :
  log "CHANGE $*"
}

#doc#3 function cmd
#
# Runs the given command, unless we're in TRIAL mode (-t).
#
# Prefix cp, rm, mv. find, etc commands with 'cmd ' in front of them.
#
#     USAGE
#       cmd CMD ARG1 ARG2
#
#cut#
cmd () {
  if [ "$trial" = 0 ]; then
    notify
    if [ "$verbose" = 2 ]; then
      info "$*"
    fi
    "$@" 2>&1 | while read -r line; do
      printf -- '%s\n' "$line"
      log "$line"
    done
  else
    printf "$normal[${magenta}TRIAL${normal}] %s\n" "$*"
  fi
}

#doc#3 function dir_is_empty
#
# True if the given dir is empty.
#
#     USAGE
#       dir_is_empty DIR
#
#cut#
dir_is_empty () {
  set -- "$1"/*
  if test -e "$1" || test -L "$1"; then
    return 1
  else
    return 0
  fi
}

#doc#2 Notification functions
#
# Functions related to change detection notifications.
#
#doc#3 function notify
#
# Triggers the notification of the current run.
#
# Notifications are send from an EXIT trap. This function, will trigger
# them if they are enabled:
#
#     USAGE
#       notify
#
#cut#
notify () {
  [ "$notify_enabled" = 1 ] && notify=1 || notify=0
}

#doc#3 function notify_run
#
#  Function to trigger notifications at the EXIT trap
#
# No arguments required.
#
#     USAGE
#       notify_run
#
#cut#
notify_run () {
  if [ "$notify_enabled" = 1 ] && [ "$notify" = 1 ]; then
    info "Running notification"
    if [ -e "$log_file" ]; then
      if response="$( curl -X POST -d @$log_file $http_options )"; then
        info "Reponse received..."
        printf '%s\n' "$response" | while read -r line; do info "$line"; done
      else
        error "Could not notify, Curl error code: $?"
      fi
    else
      error "Could not notify, unreadable: $log_file"
    fi
  fi
}

#doc#2 Rolling back functions
#
# Functions related to change detection notifications.
#
#doc#3 function rollback_path
#
# Save modified files and directories.
#
# See undo_last_changes too.
#
#     USAGE
#       rollback_path /path/to/file
#
#cut#
rollback_path () {

  local file="$1"
  local target="$rollback_dir/$run_id"

  if [ -f "$1" ] || [ -d "$1" ]; then

    cmd mkdir -p "$target"
    if [ -L "$rollback_dir/latest" ]; then

      local current="$( readlink $rollback_dir/latest )"

      if [ "X$current" != "X$target" ]; then
        cmd ln -fns "$rollback_dir/$run_id" "$rollback_dir/latest"
      fi
    else
      cmd ln -s "$rollback_dir/$run_id" "$rollback_dir/latest"
    fi

    report "Saving rollback: $file"
    cmd mkdir -p "$target$( dirname "$file" )"
    cmd cp -a "$file" "$target$file"
  else
    error "Cannot read for rollback: $file"
  fi
}

#doc#3 function rollback_cmd
#
# Function used to save modified steps.
#
# Usually you register a command to do the opposite than the previous or
# the next command.
#
# See undo_last_changes too.
#
#     USAGE
#       rollback_cmd mycommand --to-do-the-opossite-step
#
#cut#
rollback_cmd () {

  local l="$rollback_dir/latest.undo"
  local target="$rollback_dir/${run_id}.undo"

  cmd mkdir -p "$target"

  if [ -L "$l" ]; then

    local current="$( cmd readlink "$l" )"

    if [ "X$current" != "X$target" ]; then
      cmd ln -fns "$rollback_dir/${run_id}.undo" "$l"1
    fi
  else
    cmd ln -s "$rollback_dir/${run_id}.undo" "$l"
  fi

  report "Saving rollback: $*"
  if [ "$trial" = 1 ]; then
    cmd printf '%s\n' "$*" \>\> "$target/steps"
  else
    printf '%s\n' "$*" >> "$target/steps"
  fi
}

#doc#3 function undo_last_files
#
# Rollback the last filesystem changeset
#
# Well, really print the files found, fixme.
#
#     USAGE
#       undo_last_files
#
#cut#
undo_last_files () {
  for file in find "$rollback_dir/latest/"; do
    echo found "$file"
  done
}

#doc#3 function undo_last_commands
#
# Rollback the last commands changeset
#
# Well, really print the code that should run, fixme.
#
#     USAGE
#       undo_last_commands
#
#cut#
undo_last_commands () {
  if [ -e "$rollback_dir/latet.undo/steps" ]; then
    cat "$rollback_dir/latet.undo/steps"
  fi
}

#doc#3 function undo_last_changes
#
# Generic rollback invocation
#
# Important: The filesystem is restored first, and the commands run after.
#
#     USAGE
#       undo_last_changes
#
#cut#
undo_last_changes () {
  undo_last_files
  undo_last_commands
}

#doc#2 File functions
#
# Functions related to file and directory manipulations
#
#doc#3 function permissions
#
# Sets the given permissions on a file.
#
# The content is ignored. Argument order matters.
#
#     USAGE
#       permissions PATH OWNER GROUP MODE
#
#     EXAMPLES
#       permissions /path/to/dir  root root  750
#       permissions /path/to/file oper oper 0644
#
#cut#
permissions () {

  local item="$1"
  local item_c="${blue}${item}${normal}"
  local item_owner="$2"
  local item_group="$3"
  local item_mode="$( printf '%04i' "$4"; )"   # XXX, XXXX
  local owner=''
  local group=''
  local mode=''

  [ -r "$item" ] || die "Cannot read: $1"

  #
  # Obtain current values
  #
  read -r owner group mode <<EOF
$( stat -c '%U %G %a' -- "$item")
EOF

  mode="$( printf '%04i' "$mode"; )"

  #
  # Check ownership
  #
  if [ "${owner}:${group}" = "${item_owner}:${item_group}" ]; then
    assert "Already the defined ownership (${blue}$item_owner:$item_group${normal}) for: ${blue}$item${normal}"
  else
    report "Saving rollback for permissions change on: ${blue}$item${normal}"
    rollback_cmd info "YOU SHOULD: chown $owner:$group '$item'"
    report "Setting ownership for $item (wanted: $item_owner:$item_group, existing: $owner:$group)"
    cmd chown "$item_owner:$item_group" -- "$item" # FIXME plain user mode
  fi

  #
  # Check permissions
  #
  if [ "$mode" = "$item_mode" ]; then
    assert "Already the defined mode (${blue}$item_mode${normal}) for: ${blue}$item${normal}"
   else
    report "Saving rollback for permissions change on: $item"
    rollback_cmd info "YOU SHOULD: chmod $mode -- '$item'"
    report "Setting up permissions for $item (wanted: $item_mode, existing: $mode)"
    cmd chmod "$item_mode" -- "$item" # FIXME plain user mode
  fi
}

#doc#3 function directory
#
# Ensures a directory
#
#     USAGE
#       directory -n /path/to/dir -o root -g root -m 700
#       directory name /path/to/dir ensure absent
#
#cut#
directory () {

  local args="$*"
  local error="Syntax error on: directory $args"
  local dir_ensure='present'
  local dir_group='root'
  local dir_owner='root'
  local dir_mode=400
  local dir_name=''
  local trigger=''
  local trigger_run=0

  #
  # Parse our arguments
  #
  while [ $# -gt 0 ]; do
    case $1 in
      -e|--ensure|ensure)   dir_ensure=${2:?"$error"}  ;;
      -g|--group|group)     dir_group=${2:?"$error"}   ;;
      -o|--owner|owner)     dir_owner=${2:?"$error"}   ;;
      -m|--mode|mode)       dir_mode=${2:?"$error"}    ;;
      -n|--name|name)       dir_name=${2:?"$error"}    ;;
      -t|--trigger|trigger) trigger=${2:?"$error"}     ;;
      *) die "Syntax error, unknown argument to directory: $1" ;;
    esac
      shift 2
  done

  #
  # We really NEED a directory name.
  #
  [ -n "$dir_name" ] || die "Syntax error, 'directory' needs a 'name' ($args)"
  dir_name_c="${blue}${dir_name}${normal}"

  #
  # We may want it, to be absent or present
  #
  case $dir_ensure in
    absent)
      if [ -d "$dir_name" ]; then
        report "Detected directory which should be absent: $dir_name_c"
        rollback_path "$dir_name"
        cmd rm -fr -- "$dir_name"
        trigger_run=1
      else
        assert "Directory is absent: $dir_name_c"
      fi
      return
    ;;
    present)
      if [ -d "$dir_name" ]; then
        assert "Already present: $dir_name_c"
      else
        report "Detected directory which should be present: $dir_name_c"
        rollback_cmd info "YOU SHOULD: rm rf -- '$dir_name'"
        cmd mkdir -p "$dir_name"
        trigger_run=1
      fi
    ;;
    *)
      die "Syntax error, unknown argument to 'ensure' in: directory $args"
    ;;
  esac

  #
  # Ensure the directory metadata if passed.
  # FIXME permissions() arguments should be optional and no mandatory.
  #
  if [ -n "$dir_owner" ] && [ -n "$dir_group" ] && [ -n "$dir_mode" ]; then
    permissions "$dir_name" "$dir_owner" "$dir_group" "$dir_mode"
  fi

  #
  # Directory changes may have a trigger defined
  #
  if [ "$trigger_run" = 1 ]; then
    if [ -n "$trigger" ]; then
      trigger_c="${blue}$trigger${normal}"
      report "Changes on $dir_name_c, triggers: $trigger_c"
      cmd $trigger
    fi
  fi
}

#doc#3 function file
#
# Ensures a file from op files
#
#     USAGE
#      file -n /path/to/file -o root -g root -m 400 -t "echo trigger command"
#      file -n /path/to/file -e absent
#
#cut#
file () {

  local args="$*"
  local error="Syntax error on: file $args"
  local file_ensure='present'
  local file_group='root'
  local file_owner='root'
  local file_mode=400
  local file_name=''
  local file_trigger=''
  local file_trigger_run=0

  #
  # Parse the arguments
  #
  while [ $# -gt 0 ]; do
    case $1 in
      -e|--ensure|ensure)   file_ensure=${2:?"$error"}  ;;
      -g|--group|group)     file_group=${2:?"$error"}   ;;
      -o|--owner|owner)     file_owner=${2:?"$error"}   ;;
      -m|--mode|mode)       file_mode=${2:?"$error"}    ;;
      -n|--name|name)       file_name=${2:?"$error"}    ;;
      -t|--trigger|trigger) file_trigger=${2:?"$error"} ;;
      *) die "$error" ;;
    esac
    shift 2
  done

  #
  # We really NEED a file name
  #
  [ -n "$file_name" ] || die "Syntax error, 'file' needs a 'name', $args"
  file_name_c="${blue}${file_name}${normal}"

  #
  # We may want this file to be absent or present
  #
  case $file_ensure in
    absent)
      if [ -f "$file_name" ]; then
        report "Removing existing file, should be absent: $file_name_c"
        cmd rm -f  -- "$file_name"
      else
        assert "Already absent: $file_name_c"
      fi
      return
    ;;
    present)
      :
    ;;
    *)
      die "Syntax error, unknown argument to 'ensure' in 'file', $args"
    ;;
  esac

  #
  # Update the target file content if it's different than the master file
  #
  if [ -e "$file_name" ]; then
    if cmp -s "$file_name" "$files$file_name"; then
      assert "Already present: $file_name_c"
    else
      report "File with differences: $file_name_c"
      cmd diff -Nau -- "$file_name" "$files$file_name" || :
      rollback_path "$file_name"
      report "Setting up: $file_name_c"
      cmd cp -f -- "$files$file_name" "${file_name%/*}/"
      file_trigger_run='1'
    fi
  else
    report "Setting up new file: $file_name_c"
    cmd diff -Nau "$file_name" "$files$file_name" || :
    rollback_cmd info "YOU SHOULD: rm -f '$file_name'"
    rollback_cmd info "YOU SHOULD TRY (IF EMPTY): rmdir '${file_name%/*}'"
    cmd mkdir -p -- "${file_name%/*}"
    cmd cp -f -- "$files$file_name" "${file_name%/*}/"
    file_trigger_run='1'
  fi

  #
  # Ensure the directory metadata if passed
  #
  if [ -n "$file_owner" ] && [ -n "$file_group" ] && [ -n "$file_mode" ]; then
    permissions "$file_name" "$file_owner" "$file_group" "$file_mode"
  fi

  #
  # Also, file changes, may have a trigger defined
  #
  if [ "$file_trigger_run" = 1 ]; then
    if [ -n "$file_trigger" ]; then
      report "Changes on $file_name_c, triggers: $file_trigger"
      cmd $file_trigger
    fi
  fi
}

#doc#2 Package management functions
#
# Functions related to package management.
#
#doc#3 function pkg
#
# Ensure given (debian) packages status
#
# Argument order matters, first the orders, last the packages.
#
#     USAGE
#       pkg present pkg1 pkg2
#       pkg absent pkg1 pkg2
#       pkg trigger whatever absent pkg1
#
#cut#
pkg () {

  local cmd=''
  local pkg=''
  local to_process=''
  local trigger=''
  local packages="$(
    COLUMNS=200 dpkg -l | while read -r s p _; do
      [ "$s" = 'ii' ] && printf ':%s:' "$p" || :
    done
  )"

  #
  # A package maybe defined as absent or present
  #
  case $1 in
    -a|--absent|absent)   cmd=absent  ;;
    -p|--present|present) cmd=present ;;
    -t|--trigger|trigger)
      file_trigger=${2:?"$error"};
      file_trigger_c="${blue}$2${normal}"
    ;;
    *) error "Bad usage of pkg" ;;
  esac
  shift

  #
  # We may get more than one package as arguments
  #
  for pkg in "$@"; do
  pkg_c="${blue}${pkg}${normal}"
    case $packages in
      *:"$pkg":*)
        case $cmd in
          present)
            assert "Already installed: $pkg_c"
          ;;
          absent)
            to_process="$to_process $pkg"
            report "Selected to purge: $pkg_c"
          ;;
        esac
      ;;
      *)
        case $cmd in
          present)
            to_process="$to_process $pkg"
            report "Selected to install: $pkg_c"
          ;;
          absent)
            assert "Already purged: $pkg_c"
          ;;
        esac
      ;;
    esac
  done

  #
  # Perform package operations if needed
  #
  if [ -n "$to_process" ]; then
    to_process="${to_process# }"
    local cmd_c="${blue}$cmd${normal}"
    local to_process_c="${blue}$to_process${normal}"
    report "Ensuring $cmd_c for: $to_process_c"
    case $cmd in
      present)
        rollback_cmd "apt-get remove --purge $to_process"
        cmd apt-get -y install $to_process
      ;;
      absent)
        rollback_cmd "apt-get install $to_process"
        cmd apt-get remove --purge $to_process
      ;;
    esac
    if [ -n "$trigger" ]; then
      trigger_c="${blue}$trigger${normal}"
      report "Changes on $to_process_c, triggers: $trigger_c"
      cmd $trigger
    fi
  fi
}

#doc#3 function aptkey
#
# Ensure an apt key
#
# FIXME needs review, works for my usage, rollback maybe broken
#
#     USAGE
#       aptkey present /path/to/filename.key  # ex: nginx_signing.key
#       aptkey absent keyid                   # ex: 7BD9BF62
#
#cut#
aptkey () {
  case $1 in
    -p|--present|present)
      local file="$files$2"
      local key_id="$(
        gpg -v --dry-run --import -- "$file" 2>&1 | \
          awk '/gpg: pub /{print $3}'
      )"
      if [ -z "$key_id" ]; then
        error "Invalid key file: $file"
        return
      fi
      if apt-key list | grep -q -- "$key_id"; then
        assert "Already present: $key_id"
      else
        report "Importing not present key: $key_id"
        rollback_cmd apt-key del "$file"
        cmd apt-key add "$file"
      fi
    ;;
    -a|--absent|absent)
      local key_id=$1
      if apt-key list | grep -q -- "$key_id"; then
        report "Removing present key: $key_id (should be absent)"
        rollback_cmd apt-key add "$key_id"
        cmd apt-key del "$key_id"
      else
        assert "Already absent: $key_id"
      fi
    ;;
    *) error "Unknown command to aptkey. Skipping: $*"; return ;;
  esac
}


#doc#2 Users and groups functions
#
# Functions related to system users and groups
#
#doc#3 function group
#
# Ensure a system group
#
#     USAGE
#       group name oper gid 2222 members oper
#       group name oper ensure absent
#
#cut#
group () {

  local args="$*"
  local error="Syntax error on: group $args"
  local ensure='present';
  local name='';
  local gid='';
  local members='';

  #
  # Parse the arguments
  #
  while [ $# -gt 0 ]; do
    case $1 in
      -e|--ensure|ensure)   ensure=${2:?"$error"}  ;;
      -n|--name|name)       name=${2:?"$error"}    ;;
      -g|--gid|gid)         gid=${2:?"$error"}     ;;
      -m|--members|members) members=${2:?"$error"} ;;
      *) die "Bad syntax to 'group': $*" ;;
    esac
    shift 2
  done

  #
  # Our group requires a name
  #
  [ -n "$name" ] || die "'group' needs a 'name'. $error"

  #
  # And it maybe absent or present
  #
  case $ensure in
    absent)
      if getent group "$name" >/dev/null 2>&1; then
        report "Removing existing group: $name (should be absent)"
        rollback_cmd info "YOU SHOULD CREATE GROUP: $(getent group "$name")"
        cmd groupdel -- "$name"
      else
        assert "Already absent: $name"
      fi
      return
    ;;
    present)
      if getent group "$name" >/dev/null 2>&1; then
        assert "Already present: $name"
      else
        report "Adding absent group: $name (should be present)"
        local g=''
        [ -n "${gid## }" ] && g="$g -g $gid"
        cmd groupadd $g -- "$name"
        rollback_cmd info "YOU SHOULD DELETE GROUP: $(getent group "$name")"
      fi

      #
      # Check group GID if passed
      #
      local gr=''
      local p=''
      local gi=''
      local users=''
      IFS=: read -r gr p gi users <<EOF
    $( getent group "$name" )
EOF

      if [ -n "$gid" ]; then
        if [ "$gi" = "$gid" ]; then
          assert "Already the defined GID: $gid"
        else
          report "Fixing the GID for group: $name (wanted: $gid, existing: $gi)"
          rollback_cmd groupmod -g $gi -- "$name"
          cmd groupmod -g "$gid" -- "$name"
        fi
      fi

      #
      # Check group users
      #
      local u
      echo "$users" | tr ',' '\n' | while read -r u; do
        [ -n "$u" ] || continue
        if getent group | grep "$u" | grep -q "$name"; then
          assert "Already in group $name for user $u"
        else
          report "Setting group $name for user $u"
          rollback_cmd gpasswd -d $u -- "$name"
          cmd usermod -a -G "$name" -- "$u"
        fi
      done
    ;;
    *) die "$error"
  esac
}

#doc#3 function user
#
# Ensure the given user configuration
#
# TO-DO Rreview and add more options.
#
#     USAGE
#       user name oper groups oper,wheel shell /bin/bash pass 'PLAINTEXT'
#       user name oper ensure absent
#
#cut#
user () {

  local args="$*"
  local error="Syntax error on: user $args"
  local ensure='present';
  local description='';
  local login='';
  local groups='';
  local pass='';
  local shell='';
  local home='';

  while [ $# -gt 0 ]; do
    case $1 in
      -d|--description|description) description=${2:?"$error"} ;;
      -e|--ensure|ensure)           ensure=${2:?"$error"}      ;;
      -g|--groups|groups)           groups=${2:?"$error"}      ;;
      -h|--home|home)               home=${2:?"$error"}        ;;
      -l|--login|login)             login=${2:?"$error"}       ;;
      -p|--pass|pass)               pass=${2:?"$error"}        ;;
      -s|--shell|shell)             shell=${2:?"$error"}       ;;
      *) die "$error" ;;
    esac
    shift 2
  done

  [ -n "$login" ] || die "'user' needs a 'login'. $error"
  [ -n "$pass" ] ||  die "'user' needs a 'pass'. $error"

  case $ensure in
    absent)
      if getent passwd "$login" >/dev/null 2>&1; then
        rollback_cmd info "YOUR SHOULD CREATE: $(getent passwd "$login")"
        report "Removing existing user: $login (should be absent)"
        cmd userdel -- "$login"
      else
        assert "Already absent: $login"
        [[ "$home" ]] && [[ -d "$home" ]] && info "Still exists: $home"
      fi
      return
    ;;
    present)
      if getent passwd "$login" >/dev/null 2>&1; then
        assert "Already present: $login"
      else
        report "Adding absent user: $login (should be present)"
        local opts=''
        [ -n "$groups" ] && opts="$opts -g $(echo $groups | sed 's/,/ -g /g')"
        [ -n "$home" ] && opts="$opts -d $home"
        [ -n "$shell" ] && opts="$opts -s $shell"
        cmd useradd $opts -- "$login"
        rollback_cmd info "YOUR SHOULD DELETE: $(getent passwd "$login")"
      fi

      IFS=: read -r gr p gi users <<EOF
    $( getent passwd "$login" )
EOF
    ;;
    *) die "$error" ;;
  esac
}

#
# +-------------------------------+
# | nagios/opsview check helpers. |
# +-------------------------------+
#
# To-Do better integration of op definitions with this

ok () {       echo "OK- $*";       exit 0; }
warn () {     echo "WARNING- $*";  exit 1; }
critical () { echo "CRITICAL- $*"; exit 2; }
unknown () {  echo "UNKNOWN- $*";  exit 3; }


#doc#3 function doc
#
# Query and extract the nested documentation.
#
#     USAGE
#       doc [topics|TOPIC]
#
#     EXAMPLES
#       doc topics        # List them all
#       doc function      # Request all topics matching function
#       doc function doc  # Show this help
#cut#
doc () {

  local file="$( which "$0" )"
  local matched=0 result='' topic='' topics='' st=0 level=1
  local query="${1:-full}"

  case $query in
    full)   topic=''; st=0 ;;
    topics) st=1 ;;
    *[!a-zA-Z_\ ]*) die "Wrong argument $query" ;;
    *) topic="$query${3:+"\ $3"}" ;;
  esac

  local newline="
"
  while read -r line; do
    case $line in
      \#doc#*$topic*)
        if [ -z "$topic" ]; then
          [ "$st" -eq 1 ] && {
            topics="$topics$newline$topic${line#*#doc#* $topic}"
          }
          local level="${line#*#doc#}"
          level=$( echo "$level" | cut -d ' ' -f 1 )
          if [ "$level" = ' ' ]; then
            level=1
            line=${line#*#doc# }
          else
            line=${line#*#doc#$level}
          fi
          result=$result$newline$( doc_title "$level" "$line" )
          matched=1
        else
          local level=${line#*#doc#}
          level=$( echo "$level" | cut -d ' ' -f 1 )
          if [ "$level" = ' ' ]; then
            level=1
            line=${line#*#doc# }
          else
            line=${line#*#doc#$level}
          fi
          result=$result$newline$( doc_title "$level" "${line# }" )
          matched=1
        fi
      ;;
      \#doc#*)
        if [ -n "$topic" ] && [ "$matched" -eq 1 ]; then
          break
        fi
      ;;
      \#cut#*)
        matched=0
      ;;
      \#*)
        if [ "$matched" -eq 1 ]; then
          line="${line#\#}"
          result="$result$newline${line#\ }"
        fi
      ;;
      *) : ;;
    esac
  done < "$file"

  if [ "$st" -eq 1 ]; then result="${topics#$newline}"; fi
  printf -- '%s\n' "$result"
}

#doc#3 function doc_title
#
# Create a markdown title of the given level (1 to 6)
#
#     USAGE
#       doc_title 4 "My title"
#
#cut#
doc_title () {
  local level="$1"
  local title="$2"
  case $level in
    1)  printf -- '# %s\n' "$title" ;;
    2)  printf -- '## %s\n' "$title" ;;
    3)  printf -- '### %s\n' "$title" ;;
    4)  printf -- '#### %s\n' "$title" ;;
    5)  printf -- '##### %s\n' "$title" ;;
    6)  printf -- '###### %s\n' "$title" ;;
    *)  die "Unknown heading level: $level" ;;
  esac
}

#doc#3 function run_op_init
#
# This is an internal function, to initialize runs.
#
#     USAGE
#       run_op_init
#
#cut#
run_op_init () {
  #
  # If still didn't exit, we're going to launch operations.
  # Initialize the log.
  #
  (umask 077; mkdir -p "${log_file%/*}"; )
  ln -sf "$log_file" "$work_dir/logs/latest"

  #
  # Initially it was intended for root, but now can run as plain user
  #
  if [ "$(id -u)" -ne 0 ]; then
    info "Running as plain user, some operations may require higher privileges."
  fi

  [ -d "$work_dir/play" ] || die "You need to define some operations first."
  [ "$( echo "$work_dir"/play/* )" ] || die "You need to define some operations first."

  #
  # Block parallel runs from ourself
  #
  if mkdir -p "${lock%/*}" && mkdir "$lock"; then
    trap 'notify_run; [ -r "$lock" ] && rm -rf "$lock"; exit' EXIT
    echo "$$" > "$lock/PID"
  else
    if [ -e $lock/PID ]; then
      bad_pid="$( cat "$lock/PID" )"
      if kill -0 $bad_pid 2>/dev/null; then
        error "Other instance is running, or there is a staled lock. Exiting."
        error "Save this information for report:
  $( stat $lock )
  PID: ${bad_pid:-'UNKNOWN'}
  $(ps auxfwww | grep "$bad_pid")
  "
      else
        info "Removing stalled lock and re-executing"
        rm -rf "$lock"
        ./$op "$@"
        exit
      fi
    fi
    die "Could not gain lock. Exiting."
  fi
}

#doc#3 function run_op
#
# This is an internal function, to launch operations or requests.
#
#     USAGE
#       run_op "$@"
#
#cut#
run_op () {

  run_op_init
  #
  # If no operation is given run them all.
  #
  if [ "$op_default" = all ]; then
    if dir_is_empty "$work_dir/play"; then
      die "You need to define some operations to run."
    else
      # syntax check all operation files
      for f in "$work_dir/play/"*; do sh -n "$f" || exit; done
      # and source them all
      for f in "$work_dir/play/"*; do . "$f"; done
      exit
    fi
  # Or if some specific operation is given, run only that one.
  elif [ -e "$op_default" ]; then
    if sh -n -- "$op_default"; then
      if . "$op_default"; then
        assert "Finished ${green}OK${normal}: $op_default"
      else
        die "exit with code: ${red}${?}${normal} $op_default"
      fi
    else
      die "invalid syntax in: ${red}${op_default}${normal}"
    fi
  else
    die "could not read file: ${red}${op_default}${normal}"
  fi
}

#doc#3 function import_path
#
# Imports the given path to the op ```./files/``` tree.
#
# The given argument, should be an **absolute** path.
#
#     USAGE
#       import_path PATH
#
#cut#
import_path () {
  run_op_init
  local path="$1"
  if [ -r "$path" ]; then
    if [ -r "$files/$path" ]; then
      die "Already exists: $files/$path"
    else
      d="$files/${path%/*}"
      if cmd mkdir -p -- "$d"; then
        report "Added directory: $d"
        cmd cp -a -- "$path" "${d:?'ooops'}/"
        report "Added: $path"
      else
        die "Couldn't import: $2"
      fi
    fi
  else
    die "Cannot read: $2"
  fi
}


#doc#3 function gen
#
# Given a path, generates ```op``` rules for that files to STDOUT
#
# If a second parameter of ```-p```, ```-perms```, ```--perms```, ```perms```,
# is given, then will generate rules only for permisions (not for content).
#
# The firs level will be removed in the case of paths starting by ```files/```.
#
# Use with common sense, only for normal files (config files, aplication
# files) and directories.
#
# Not tested against special files (links, devices, sockets, etc).
#
#     USAGE
#       gen files/etc/newtree    # generate rules for file()
#       gen /usr/bin --perms     # generate rules for permissions()
#
#cut#
gen () {

  local path
  local p=0

  while [ "$#" -gt 0 ]; do
    case $1 in
      '') >&2 op_help 1 ;;
      -p|-perms|--perms|perms|permissions) p=1; shift ;;
      *)
        if [ -d "$1" ] || [ -f "$1" ]; then
          path=$1
          shift
        else
          die "Not a valid path in the current filesystem: $1"
        fi
      ;;
    esac
  done

  [ -e "$path" ] || >&2 op_help 1

  local o g m n
  while read -r o g m n; do
    if [ -d "$n" ]; then
      printf "directory -o '%s' -g '%s' -m %s -n '%s'\n" "$o" "$g" $m "${n#files}"
    elif [ -f "$n" ]; then
      if [ "$p" -eq 0 ]; then
        printf "file -o '%s' -g '%s' -m %s -n '%s'\n" "$o" "$g" $m "${n#files}"
      else
        printf "permissions -o '%s' -g '%s' -m %s -n '%s'\n" "$o" "$g" $m "${n#files}"
      fi
    fi
  done <<EOF
    $( find "$path" -printf '%u %g %m %p\n' )
EOF
}


#doc#3 HELP
#
#     op - the operations tool
#   
#     USAGE:
#       op COMMAND [ARGUMENTS]
#   
#     COMMANDS:
#       play NAME ............. Play only NAME. See 'play list'.
#       request NAME [ARGS] ... Runs a parametrized request. See 'request list'
#       trial ................. Trial mode (do not apply any change)
#       gen PATH [--perms] .... Print file rules for given path, or perms with -p
#       import PATH ........... Imports a given path, into the op tree
#       undo .................. Rollback steps, and restore the modified files
#       doc [topics|TOPIC] .... Show detailed documentation, and exit
#       help .................. Show this help message, and exit
#   
#     Sort format (-p) or long format (--play) as well as words (play) are valid.
#   
#     EXAMPLES
#       op --play --list
#       op play stack-network trial verbose
#       op -p stack-network
#       op undo
#       op -v --request typeA param1 param2
#       op import /etc/hosts
#       op --gen /etc/network --perms
#
#cut#

while [ $# -gt 0 ]; do
  case $1 in
    -p|--play|play)
      case $* in
        (*'list'*|*'-l'*|*'--list'*)
          for i in "$work_dir"/play/*; do
            printf '%s\n' "${i##$work_dir/play/}"
          done
          exit
        ;;
        *)
          :
        ;;
      esac
      if [ "$#" -ge 2 ]; then
        if [ -e "$work_dir/play/$2" ]; then
          op_default="$work_dir/play/$2"
          shift 2
        elif [ "$2" = all ]; then
          op_default="all"
          shift 2
        else
          error "Unknown operation type: $2"
          error "List of known operations:"
          for i in "$work_dir"/play/*; do
            printf ' %s\n' "${i##$work_dir/play/}" >&2
          done
          exit 1
        fi
      else
        die "$( doc HELP )"
      fi
    ;;
    -r|--request|request)
      case $* in
        (*'list'*|*'-l'*|*'--list'*)
          for i in "$work_dir"/requests/*; do
            printf '%s\n' "${i##$work_dir/requests/}"
          done
          return
        ;;
        *)
        run_op "$@"
        ;;
      esac
      if [ "$#" -ge 2 ]; then
        if [ -e "$work_dir/requests/$2" ]; then
          op_default="$work_dir/requests/$2"
          shift 2
          request_args="$*"
          shift "$#"
        else
          error "Unknown request type: $2"
          error "List of known requests:"
          for i in $work_dir/requests/*; do
            printf '%s\n' "${i##$work_dir/requests/}"
          done
          die "$( doc HELP )"
        fi
      else
        die "$( doc HELP )"
      fi
    ;;
    -g|--gen|gen)
      shift
      gen "$@"
      exit
    ;;
    -i|--import|import)
      if [ "$#" -eq 2 ]; then
        import_path "$2"
      else
        die "$( doc HELP )"
      fi
      exit
    ;;
    -n|--nocolor|nocolor)
      nocolor=1
      normal=''
      red=''
      green=''
      yellow=''
      blue=''
      magenta=''
      shift 1
    ;;
    -t|--trial|trial)
      trial=1
      shift 1
    ;;
    -u|--undo|undo)
      undo_last_changes
      exit
    ;;
    -v|--verbose|verbose)
      verbose=1
      shift 1
    ;;
    -d|--doc|doc)
      shift 1
      doc "$@"
      exit $?
    ;;
    -h|--help|help)
      doc HELP
      exit
    ;;
    *)
      error "Unknown argument: $1"
      die "$( doc HELP )"
    ;;
  esac
done

op_default="${op_default:-all}"
run_op

#doc#3 See also
#
# See the project page at: http://1n1.github.io/op/
#
# And the source repository at: https://github.com/1n1/op
#
#doc#2 License
#
#     Copyright (C) 2015, Iñigo Tejedor Arrondo <http://inigo.me/>
#
#     All rights reserved.
#
#     Permission to use, copy, modify, and/or distribute this software for any
#     purpose with or without fee is hereby granted, provided that the above
#     copyright notice and this permission notice appear in all copies.
#
#     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#     WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#     MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#     ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#     WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#     ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#cut#

